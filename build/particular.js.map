{
  "version": 3,
  "sources": ["../src/math/MathUtils.js", "../src/math/Quaternion.js", "../src/math/Vector3.js", "../src/math/VecUtils.js", "../src/behaviors/Align.js", "../src/behaviors/Avoid.js", "../src/behaviors/Cohesion.js", "../src/behaviors/Collision.js", "../src/behaviors/Seek.js", "../src/behaviors/SeekRandom.js", "../src/behaviors/Separate.js", "../src/behaviors/Wander.js", "../src/math/HashGrid.js", "../src/Particle.js", "../src/physics/SimplePhysics.js", "../src/physics/GridPhysics.js"],
  "sourcesContent": ["// Taken from https://github.com/mrdoob/three.js, r139\n\nconst _lut = [];\n\nfor (let i = 0; i < 256; i++) {\n  _lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n}\n\nlet _seed = 1234567;\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nexport function generateUUID() {\n  const d0 = (Math.random() * 0xffffffff) | 0;\n  const d1 = (Math.random() * 0xffffffff) | 0;\n  const d2 = (Math.random() * 0xffffffff) | 0;\n  const d3 = (Math.random() * 0xffffffff) | 0;\n  const uuid =\n    _lut[d0 & 0xff] +\n    _lut[(d0 >> 8) & 0xff] +\n    _lut[(d0 >> 16) & 0xff] +\n    _lut[(d0 >> 24) & 0xff] +\n    '-' +\n    _lut[d1 & 0xff] +\n    _lut[(d1 >> 8) & 0xff] +\n    '-' +\n    _lut[((d1 >> 16) & 0x0f) | 0x40] +\n    _lut[(d1 >> 24) & 0xff] +\n    '-' +\n    _lut[(d2 & 0x3f) | 0x80] +\n    _lut[(d2 >> 8) & 0xff] +\n    '-' +\n    _lut[(d2 >> 16) & 0xff] +\n    _lut[(d2 >> 24) & 0xff] +\n    _lut[d3 & 0xff] +\n    _lut[(d3 >> 8) & 0xff] +\n    _lut[(d3 >> 16) & 0xff] +\n    _lut[(d3 >> 24) & 0xff];\n\n  // .toLowerCase() here flattens concatenated strings to save heap memory space.\n  return uuid.toLowerCase();\n}\n\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nexport function euclideanModulo(n, m) {\n  return ((n % m) + m) % m;\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nexport function mapLinear(x, a1, a2, b1, b2) {\n  return b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-export function-r5230/\nexport function inverseLerp(x, y, value) {\n  if (x !== y) {\n    return (value - x) / (y - x);\n  } else {\n    return 0;\n  }\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nexport function lerp(x, y, t) {\n  return (1 - t) * x + t * y;\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nexport function damp(x, y, lambda, dt) {\n  return lerp(x, y, 1 - Math.exp(-lambda * dt));\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nexport function pingpong(x, length = 1) {\n  return length - Math.abs(euclideanModulo(x, length * 2) - length);\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nexport function smoothstep(x, min = 0, max = 1) {\n  if (x <= min) return 0;\n  if (x >= max) return 1;\n\n  x = (x - min) / (max - min);\n\n  return x * x * (3 - 2 * x);\n}\n\nexport function smootherstep(x, min = 0, max = 1) {\n  if (x <= min) return 0;\n  if (x >= max) return 1;\n\n  x = (x - min) / (max - min);\n\n  return x * x * x * (x * (x * 6 - 15) + 10);\n}\n\n// Random integer from <low, high> interval\nexport function randInt(low, high) {\n  return low + Math.floor(Math.random() * (high - low + 1));\n}\n\n// Random float from <low, high> interval\nexport function randFloat(low, high) {\n  return low + Math.random() * (high - low);\n}\n\n// Random float from <-range/2, range/2> interval\nexport function randFloatSpread(range) {\n  return range * (0.5 - Math.random());\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nexport function seededRandom(s) {\n  if (s !== undefined) _seed = s;\n\n  // Mulberry32 generator\n\n  let t = (_seed += 0x6d2b79f5);\n\n  t = Math.imul(t ^ (t >>> 15), t | 1);\n\n  t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n\n  return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n}\n\nexport function degToRad(degrees) {\n  return degrees * DEG2RAD;\n}\n\nexport function radToDeg(radians) {\n  return radians * RAD2DEG;\n}\n\nexport function isPowerOfTwo(value) {\n  return (value & (value - 1)) === 0 && value !== 0;\n}\n\nexport function ceilPowerOfTwo(value) {\n  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\nexport function floorPowerOfTwo(value) {\n  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n}\n\nexport function setQuaternionFromProperEuler(q, a, b, c, order) {\n  // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n  // rotations are applied to the axes in the order specified by 'order'\n  // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n  // angles are in radians\n\n  const cos = Math.cos;\n  const sin = Math.sin;\n\n  const c2 = cos(b / 2);\n  const s2 = sin(b / 2);\n\n  const c13 = cos((a + c) / 2);\n  const s13 = sin((a + c) / 2);\n\n  const c1_3 = cos((a - c) / 2);\n  const s1_3 = sin((a - c) / 2);\n\n  const c3_1 = cos((c - a) / 2);\n  const s3_1 = sin((c - a) / 2);\n\n  switch (order) {\n    case 'XYX':\n      q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n      break;\n\n    case 'YZY':\n      q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n      break;\n\n    case 'ZXZ':\n      q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n      break;\n\n    case 'XZX':\n      q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n      break;\n\n    case 'YXY':\n      q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n      break;\n\n    case 'ZYZ':\n      q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n      break;\n\n    default:\n      console.warn(\n        'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' +\n          order\n      );\n  }\n}\n\nexport function denormalize(value, array) {\n  switch (array.constructor) {\n    case Float32Array:\n      return value;\n\n    case Uint16Array:\n      return value / 65535.0;\n\n    case Uint8Array:\n      return value / 255.0;\n\n    case Int16Array:\n      return Math.max(value / 32767.0, -1.0);\n\n    case Int8Array:\n      return Math.max(value / 127.0, -1.0);\n\n    default:\n      throw new Error('Invalid component type.');\n  }\n}\n\nexport function normalize(value, array) {\n  switch (array.constructor) {\n    case Float32Array:\n      return value;\n\n    case Uint16Array:\n      return Math.round(value * 65535.0);\n\n    case Uint8Array:\n      return Math.round(value * 255.0);\n\n    case Int16Array:\n      return Math.round(value * 32767.0);\n\n    case Int8Array:\n      return Math.round(value * 127.0);\n\n    default:\n      throw new Error('Invalid component type.');\n  }\n}\n\nexport default {\n  DEG2RAD,\n  RAD2DEG,\n  generateUUID,\n  clamp,\n  euclideanModulo,\n  mapLinear,\n  inverseLerp,\n  lerp,\n  damp,\n  pingpong,\n  smoothstep,\n  smootherstep,\n  randInt,\n  randFloat,\n  randFloatSpread,\n  seededRandom,\n  degToRad,\n  radToDeg,\n  isPowerOfTwo,\n  ceilPowerOfTwo,\n  floorPowerOfTwo,\n  setQuaternionFromProperEuler,\n  normalize,\n  denormalize,\n};\n", "// Taken from https://github.com/mrdoob/three.js, r139\n\nimport * as MathUtils from './MathUtils.js';\n\nexport default class Quaternion {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  static slerp(qa, qb, qm, t) {\n    console.warn(\n      'Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.'\n    );\n    return qm.slerpQuaternions(qa, qb, t);\n  }\n\n  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n\n    let x0 = src0[srcOffset0 + 0],\n      y0 = src0[srcOffset0 + 1],\n      z0 = src0[srcOffset0 + 2],\n      w0 = src0[srcOffset0 + 3];\n\n    const x1 = src1[srcOffset1 + 0],\n      y1 = src1[srcOffset1 + 1],\n      z1 = src1[srcOffset1 + 2],\n      w1 = src1[srcOffset1 + 3];\n\n    if (t === 0) {\n      dst[dstOffset + 0] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n      return;\n    }\n\n    if (t === 1) {\n      dst[dstOffset + 0] = x1;\n      dst[dstOffset + 1] = y1;\n      dst[dstOffset + 2] = z1;\n      dst[dstOffset + 3] = w1;\n      return;\n    }\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      let s = 1 - t;\n      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n        dir = cos >= 0 ? 1 : -1,\n        sqrSin = 1 - cos * cos;\n\n      // Skip the Slerp for tiny steps to avoid numeric problems:\n      if (sqrSin > Number.EPSILON) {\n        const sin = Math.sqrt(sqrSin),\n          len = Math.atan2(sin, cos * dir);\n\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      const tDir = t * dir;\n\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir;\n\n      // Normalize in case we just did a lerp:\n      if (s === 1 - t) {\n        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n\n  static multiplyQuaternionsFlat(\n    dst,\n    dstOffset,\n    src0,\n    srcOffset0,\n    src1,\n    srcOffset1\n  ) {\n    const x0 = src0[srcOffset0];\n    const y0 = src0[srcOffset0 + 1];\n    const z0 = src0[srcOffset0 + 2];\n    const w0 = src0[srcOffset0 + 3];\n\n    const x1 = src1[srcOffset1];\n    const y1 = src1[srcOffset1 + 1];\n    const z1 = src1[srcOffset1 + 2];\n    const w1 = src1[srcOffset1 + 3];\n\n    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n    return dst;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set x(value) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set y(value) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n\n  get z() {\n    return this._z;\n  }\n\n  set z(value) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n\n  get w() {\n    return this._w;\n  }\n\n  set w(value) {\n    this._w = value;\n    this._onChangeCallback();\n  }\n\n  set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  }\n\n  copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromEuler(euler, update) {\n    if (!(euler && euler.isEuler)) {\n      throw new Error(\n        'Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.'\n      );\n    }\n\n    const x = euler._x,\n      y = euler._y,\n      z = euler._z,\n      order = euler._order;\n\n    // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    const cos = Math.cos;\n    const sin = Math.sin;\n\n    const c1 = cos(x / 2);\n    const c2 = cos(y / 2);\n    const c3 = cos(z / 2);\n\n    const s1 = sin(x / 2);\n    const s2 = sin(y / 2);\n    const s3 = sin(z / 2);\n\n    switch (order) {\n      case 'XYZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'YXZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      case 'ZXY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'ZYX':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      case 'YZX':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'XZY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      default:\n        console.warn(\n          'Quaternion: .setFromEuler() encountered an unknown order: ' + order\n        );\n    }\n\n    if (update !== false) this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    // assumes axis is normalized\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle);\n\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33;\n\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0);\n\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n\n    let r = vFrom.dot(vTo) + 1;\n\n    if (r < Number.EPSILON) {\n      // vFrom and vTo point in opposite directions\n\n      r = 0;\n\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n\n    return this.normalize();\n  }\n\n  angleTo(q) {\n    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n  }\n\n  rotateTowards(q, step) {\n    const angle = this.angleTo(q);\n\n    if (angle === 0) return this;\n\n    const t = Math.min(1, step / angle);\n\n    this.slerp(q, t);\n\n    return this;\n  }\n\n  identity() {\n    return this.set(0, 0, 0, 1);\n  }\n\n  invert() {\n    // quaternion is assumed to have unit length\n\n    return this.conjugate();\n  }\n\n  conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  }\n\n  lengthSq() {\n    return (\n      this._x * this._x +\n      this._y * this._y +\n      this._z * this._z +\n      this._w * this._w\n    );\n  }\n\n  length() {\n    return Math.sqrt(\n      this._x * this._x +\n        this._y * this._y +\n        this._z * this._z +\n        this._w * this._w\n    );\n  }\n\n  normalize() {\n    let l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  multiply(q, p) {\n    if (p !== undefined) {\n      console.warn(\n        'Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.'\n      );\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  }\n\n  premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  }\n\n  multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    const qax = a._x,\n      qay = a._y,\n      qaz = a._z,\n      qaw = a._w;\n    const qbx = b._x,\n      qby = b._y,\n      qbz = b._z,\n      qbw = b._w;\n\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n\n    const x = this._x,\n      y = this._y,\n      z = this._z,\n      w = this._w;\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n\n      return this;\n    }\n\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n\n      this.normalize();\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n      ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  slerpQuaternions(qa, qb, t) {\n    return this.copy(qa).slerp(qb, t);\n  }\n\n  random() {\n    // Derived from http://planning.cs.uiuc.edu/node198.html\n    // Note, this source uses w, x, y, z ordering,\n    // so we swap the order below.\n\n    const u1 = Math.random();\n    const sqrt1u1 = Math.sqrt(1 - u1);\n    const sqrtu1 = Math.sqrt(u1);\n\n    const u2 = 2 * Math.PI * Math.random();\n\n    const u3 = 2 * Math.PI * Math.random();\n\n    return this.set(\n      sqrt1u1 * Math.cos(u2),\n      sqrtu1 * Math.sin(u3),\n      sqrtu1 * Math.cos(u3),\n      sqrt1u1 * Math.sin(u2)\n    );\n  }\n\n  equals(quaternion) {\n    return (\n      quaternion._x === this._x &&\n      quaternion._y === this._y &&\n      quaternion._z === this._z &&\n      quaternion._w === this._w\n    );\n  }\n\n  fromArray(array, offset = 0) {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  toArray(array = [], offset = 0) {\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n\n    return array;\n  }\n\n  fromBufferAttribute(attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n\n    return this;\n  }\n\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n\n    return this;\n  }\n\n  _onChangeCallback() {}\n}\n\nQuaternion.prototype.isQuaternion = true;\n", "// Taken from https://github.com/mrdoob/three.js, r139\n\nimport * as MathUtils from './MathUtils.js';\nimport Quaternion from './Quaternion.js';\n\nexport default class Vector3 {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  set(x, y, z) {\n    if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n\n    return this;\n  }\n\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n\n    return this;\n  }\n\n  setZ(z) {\n    this.z = z;\n\n    return this;\n  }\n\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n\n    return this;\n  }\n\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      console.warn(\n        'Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'\n      );\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n\n    return this;\n  }\n\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n\n    return this;\n  }\n\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      console.warn(\n        'Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'\n      );\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n\n    return this;\n  }\n\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n\n    return this;\n  }\n\n  multiply(v, w) {\n    if (w !== undefined) {\n      console.warn(\n        'Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.'\n      );\n      return this.multiplyVectors(v, w);\n    }\n\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n\n    return this;\n  }\n\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n\n    return this;\n  }\n\n  multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n\n    return this;\n  }\n\n  applyEuler(euler) {\n    if (!(euler && euler.isEuler)) {\n      console.error(\n        'Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.'\n      );\n    }\n\n    return this.applyQuaternion(_quaternion.setFromEuler(euler));\n  }\n\n  applyAxisAngle(axis, angle) {\n    return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n  }\n\n  applyMatrix3(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n\n    return this;\n  }\n\n  applyNormalMatrix(m) {\n    return this.applyMatrix3(m).normalize();\n  }\n\n  applyMatrix4(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n\n    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\n    return this;\n  }\n\n  applyQuaternion(q) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const qx = q.x,\n      qy = q.y,\n      qz = q.z,\n      qw = q.w;\n\n    // calculate quat * vector\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return this;\n  }\n\n  project(camera) {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(\n      camera.projectionMatrix\n    );\n  }\n\n  unproject(camera) {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(\n      camera.matrixWorld\n    );\n  }\n\n  transformDirection(m) {\n    // input: Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n\n    return this.normalize();\n  }\n\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n\n    return this;\n  }\n\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n\n    return this;\n  }\n\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n\n    return this;\n  }\n\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n\n    return this;\n  }\n\n  clampScalar(minVal, maxVal) {\n    this.x = Math.max(minVal, Math.min(maxVal, this.x));\n    this.y = Math.max(minVal, Math.min(maxVal, this.y));\n    this.z = Math.max(minVal, Math.min(maxVal, this.z));\n\n    return this;\n  }\n\n  clampLength(min, max) {\n    const length = this.length();\n\n    return this.divideScalar(length || 1).multiplyScalar(\n      Math.max(min, Math.min(max, length))\n    );\n  }\n\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n\n    return this;\n  }\n\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n\n    return this;\n  }\n\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n\n    return this;\n  }\n\n  roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\n    return this;\n  }\n\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n\n    return this;\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  }\n\n  // TODO lengthSquared?\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n\n    return this;\n  }\n\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n\n    return this;\n  }\n\n  cross(v, w) {\n    if (w !== undefined) {\n      console.warn(\n        'Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.'\n      );\n      return this.crossVectors(v, w);\n    }\n\n    return this.crossVectors(this, v);\n  }\n\n  crossVectors(a, b) {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z;\n    const bx = b.x,\n      by = b.y,\n      bz = b.z;\n\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n\n    return this;\n  }\n\n  projectOnVector(v) {\n    const denominator = v.lengthSq();\n\n    if (denominator === 0) return this.set(0, 0, 0);\n\n    const scalar = v.dot(this) / denominator;\n\n    return this.copy(v).multiplyScalar(scalar);\n  }\n\n  projectOnPlane(planeNormal) {\n    _vector.copy(this).projectOnVector(planeNormal);\n\n    return this.sub(_vector);\n  }\n\n  reflect(normal) {\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n\n    return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n  }\n\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\n    if (denominator === 0) return Math.PI / 2;\n\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos(MathUtils.clamp(theta, -1, 1));\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y,\n      dz = this.z - v.z;\n\n    return dx * dx + dy * dy + dz * dz;\n  }\n\n  manhattanDistanceTo(v) {\n    return (\n      Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z)\n    );\n  }\n\n  setFromSpherical(s) {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  }\n\n  setFromSphericalCoords(radius, phi, theta) {\n    const sinPhiRadius = Math.sin(phi) * radius;\n\n    this.x = sinPhiRadius * Math.sin(theta);\n    this.y = Math.cos(phi) * radius;\n    this.z = sinPhiRadius * Math.cos(theta);\n\n    return this;\n  }\n\n  setFromCylindrical(c) {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  }\n\n  setFromCylindricalCoords(radius, theta, y) {\n    this.x = radius * Math.sin(theta);\n    this.y = y;\n    this.z = radius * Math.cos(theta);\n\n    return this;\n  }\n\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n\n    return this;\n  }\n\n  setFromMatrixScale(m) {\n    const sx = this.setFromMatrixColumn(m, 0).length();\n    const sy = this.setFromMatrixColumn(m, 1).length();\n    const sz = this.setFromMatrixColumn(m, 2).length();\n\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n\n    return this;\n  }\n\n  setFromMatrixColumn(m, index) {\n    return this.fromArray(m.elements, index * 4);\n  }\n\n  setFromMatrix3Column(m, index) {\n    return this.fromArray(m.elements, index * 3);\n  }\n\n  setFromEuler(e) {\n    this.x = e._x;\n    this.y = e._y;\n    this.z = e._z;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  }\n\n  fromArray(array, offset = 0) {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n\n    return this;\n  }\n\n  toArray(array = [], offset = 0) {\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n\n    return array;\n  }\n\n  fromBufferAttribute(attribute, index, offset) {\n    if (offset !== undefined) {\n      console.warn(\n        'Vector3: offset has been removed from .fromBufferAttribute().'\n      );\n    }\n\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n\n    return this;\n  }\n\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n\n    return this;\n  }\n\n  randomDirection() {\n    // Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n    const u = (Math.random() - 0.5) * 2;\n    const t = Math.random() * Math.PI * 2;\n    const f = Math.sqrt(1 - u ** 2);\n\n    this.x = f * Math.cos(t);\n    this.y = f * Math.sin(t);\n    this.z = u;\n\n    return this;\n  }\n\n  limit(length = 1.0) {\n    if (this.lengthSq() > length * length) {\n      this.setLength(length);\n    }\n  }\n\n  constrainX(min = 0.0, max = 0.0) {\n    if (this.x < min) this.x = min;\n    if (this.x > max) this.x = max;\n  }\n\n  constrainY(min = 0.0, max = 0.0) {\n    if (this.y < min) this.y = min;\n    if (this.y > max) this.y = max;\n  }\n\n  constrainZ(min = 0.0, max = 0.0) {\n    if (this.z < min) this.z = min;\n    if (this.z > max) this.z = max;\n  }\n\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n  }\n}\n\nVector3.prototype.isVector3 = true;\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n", "export const limit = (vec3, length = 1.0) => {\n  if (vec3.lengthSq() > length * length) {\n    vec3.setLength(length);\n  }\n};\n\nexport const constrainX = (vec3, min = 0.0, max = 0.0) => {\n  if (vec3.x < min) vec3.x = min;\n  if (vec3.x > max) vec3.x = max;\n};\n\nexport const constrainY = (vec3, min = 0.0, max = 0.0) => {\n  if (vec3.y < min) vec3.y = min;\n  if (vec3.y > max) vec3.y = max;\n};\n\nexport const constrainZ = (vec3, min = 0.0, max = 0.0) => {\n  if (vec3.z < min) vec3.z = min;\n  if (vec3.z > max) vec3.z = max;\n};\n\nexport default {\n  limit,\n  constrainX,\n  constrainY,\n  constrainZ,\n};\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\nconst ali = new Vector3();\n\n/**\n * Local Particle Behavior: compares the passed in Particle to its own list of neighbors\n * </p> addBehavior to the VParticle.behaviors;\n * </p> Alignment algorythm based on: Craig Reynold's Boids program to simulate the flocking behavior of birds. Here just the rule of Alignment. </p> Java\n * implementation Daniel Shiffman (www.shiffman.net); Jose Sanchez (www.plethora-project.com)\n */\nexport default class Align {\n  constructor({ distance = 50, maxSpeed = 3.0, maxForce = 0.05 } = {}) {\n    this.distance = distance;\n    this.maxSpeed = maxSpeed;\n    this.maxForce = maxForce;\n    this.enabled = true;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.align(particle);\n      particle.addForce(f);\n    }\n  }\n\n  align(particle) {\n    ali.set(0, 0, 0);\n    let count = 0;\n    const distanceSquared = this.distance * this.distance;\n\n    particle.neighbors.forEach((neighbor) => {\n      if (neighbor !== particle) {\n        const d = particle.distanceToSquared(neighbor);\n\n        if (d < distanceSquared) {\n          ali.add(neighbor.getVelocity());\n          count++;\n        }\n      }\n    });\n\n    if (count > 0) {\n      ali.multiplyScalar(1.0 / count);\n    }\n    if (ali.lengthSq() > 0) {\n      ali.setLength(this.maxSpeed);\n      ali.sub(particle.getVelocity());\n      limit(ali, this.maxForce);\n    }\n    return ali;\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\nexport default class Avoid {\n  constructor({\n    target = new Vector3(),\n    maxSpeed = 3.5,\n    maxForce = 0.5,\n    maxDistance = 100.0,\n  } = {}) {\n    this.target = target;\n    this.maxSpeed = maxSpeed;\n    this.maxForce = maxForce;\n\n    this.maxDistance = maxDistance;\n    this.enabled = true;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.seek(particle);\n      particle.addForce(f);\n    }\n  }\n\n  seek(particle) {\n    const desired = new Vector3().copy(particle);\n    desired.sub(this.target);\n    const distance = desired.length();\n\n    if (distance < this.maxDistance) {\n      desired.setLength(this.maxSpeed * (1 - distance / this.maxDistance));\n    } else {\n      desired.set(0, 0, 0);\n    }\n\n    desired.sub(particle.getVelocity());\n    limit(desired, this.maxForce);\n\n    return desired;\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\nconst sum = new Vector3();\nconst desired = new Vector3();\nconst steer = new Vector3();\n\n/**\n * Local Particle Behavior: compares the passed in Particle to its own list of neighbors\n *\n * </p> cohesion algorythm based on: Craig Reynold's Boids program to simulate the flocking behavior of birds. Here just the rule of coherence. </p> Java\n * implementation Daniel Shiffman (www.shiffman.net); Jose Sanchez (www.plethora-project.com)\n *\n */\nexport default class Cohesion {\n  constructor({ distance = 50, maxSpeed = 3.0, maxForce = 0.05 } = {}) {\n    this.distance = distance;\n    this.maxSpeed = maxSpeed;\n    this.maxForce = maxForce;\n    this.enabled = true;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.cohesion(particle);\n      particle.addForce(f);\n    }\n  }\n\n  cohesion(particle) {\n    sum.set(0, 0, 0);\n\n    let count = 0;\n    const distanceSquared = this.distance * this.distance;\n\n    particle.neighbors.forEach((neighbor) => {\n      if (neighbor !== particle) {\n        const d = particle.distanceToSquared(neighbor);\n        if (d > 0 && d < distanceSquared) {\n          sum.add(neighbor);\n          count++;\n        }\n      }\n    });\n    if (count > 0) {\n      sum.multiplyScalar(1.0 / count);\n      return this.seek(sum, particle);\n    }\n    return sum;\n  }\n\n  seek(target, particle) {\n    desired.copy(target).sub(particle);\n    desired.setLength(this.maxSpeed);\n    const m = 10;\n    if (desired.length() < m) {\n      desired.multiplyScalar(this.maxSpeed * (desired.length() / m));\n    } else {\n      desired.multiplyScalar(this.maxSpeed);\n    }\n    steer.copy(desired).sub(particle.getVelocity());\n    limit(steer, this.maxForce);\n\n    return steer;\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\nconst delta = new Vector3();\n\n/**\n * Local Particle Behavior: compares the passed in Particle to its own list of\n * neighbors </p> VParticle.neighbors gets automatically updated; selects\n * neighbors in Range: VPhysics.hashGrid.Radius </p> addBehavior to the\n * VParticle.behaviors; call each timeStep\n *\n * </p> Collision Detection based on the VParticle.radius\n */\n\nexport default class Collision {\n  /**\n   * proportional offset of the particle radius for offset (radius*(1-offset))\n   */\n  constructor({ offset = 0.0, maxForce = 0.2 } = {}) {\n    this.offset = offset;\n    this.maxForce = maxForce;\n    this.enabled = true;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const sum = new Vector3();\n      let count = 1;\n      const radius =\n        this.offset === 0.0\n          ? particle.radius\n          : particle.radius * (1.0 - this.offset);\n\n      particle.neighbors.forEach((neighbor) => {\n        if (neighbor !== particle && !neighbor.noCollision) {\n          delta.copy(particle);\n          delta.sub(neighbor);\n\n          const dist = delta.length();\n\n          const r = radius + neighbor.radius;\n\n          if (dist < r) {\n            const force = delta.setLength((r - dist) / r); // multiplyScalar\n\n            sum.add(force);\n            count++;\n          }\n        }\n      });\n\n      sum.multiplyScalar(1.0 / count);\n      limit(sum, this.maxForce);\n\n      particle.addForce(sum);\n    }\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\n/**\n * Local Particle Behavior: compares the passed in Particle to its own list of neighbors\n * </p> addBehavior to the VParticle.behaviors; call each timeStep\n * </p> Seek algorythm based on: Craig Reynold's Boids program to simulate the flocking behavior of birds. Here just the rule of Steering. </p> Java\n * implementation Daniel Shiffman (www.shiffman.net)\n */\nexport default class Seek extends EventTarget {\n  constructor({\n    target = new Vector3(),\n    maxSpeed = 3.5,\n    maxForce = 0.5,\n    minDistance = 0.0,\n    slowDownDistance = 100.0,\n    easing = undefined,\n    arriveEnabled = false,\n    arriveDistance = 0.01,\n  } = {}) {\n    super();\n\n    this.target = target;\n    this.maxSpeed = maxSpeed;\n    this.maxForce = maxForce;\n    this.minDistance = minDistance;\n    this.slowDownDistance = slowDownDistance;\n    this.easing = easing;\n    this.arriveEnabled = arriveEnabled;\n    this.arriveDistance = arriveDistance;\n    this.enabled = true;\n    this.arrived = false;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.seek(particle);\n      particle.addForce(f);\n    }\n  }\n\n  seek(particle) {\n    const desired = new Vector3().copy(this.target).sub(particle);\n    const distance = desired.length();\n\n    if (distance > this.minDistance) {\n      if (distance < this.minDistance + this.slowDownDistance) {\n        const k = (distance - this.minDistance) / this.slowDownDistance;\n        if (this.easing !== undefined && this.easing !== null) {\n          desired.setLength(this.maxSpeed * this.easing(k));\n        } else {\n          desired.setLength(this.maxSpeed * k);\n        }\n      } else {\n        desired.setLength(this.maxSpeed);\n      }\n\n      desired.sub(particle.getVelocity());\n      limit(desired, this.maxForce);\n    } else {\n      desired.set(0, 0, 0);\n    }\n\n    if (this.arriveEnabled) {\n      const arrived = distance < this.arriveDistance;\n      if (arrived && !this.arrived) {\n        this.dispatchEvent(new Event('arrive'));\n        this.arrived = arrived;\n      }\n    }\n\n    return desired;\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport Math2 from '../math/MathUtils.js';\nimport { limit } from '../math/VecUtils.js';\n\n// Based on Seek, automatically creates new random target within min and max (box space)\n\nexport default class SeekRandom {\n  constructor({\n    maxSpeed = 3.5,\n    maxForce = 0.5,\n    min = new Vector3(-10, -10, -10),\n    max = new Vector3(10, 10, 10),\n    minDistance = 0.01,\n    slowDownDistance = 0.0,\n  } = {}) {\n    this.maxSpeed = maxSpeed;\n    this.maxForce = maxForce;\n    this.min = min;\n    this.max = max;\n    this.minDistance = minDistance < maxForce ? maxForce : minDistance;\n    this.slowDownDistance = slowDownDistance;\n    this.enabled = true;\n\n    this.setRandomTarget();\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.seek(particle);\n      particle.addForce(f);\n    }\n  }\n\n  seek(particle) {\n    const desired = new Vector3().copy(this.target);\n    desired.sub(particle);\n    const dist = desired.length();\n\n    if (dist <= this.minDistance) {\n      this.setRandomTarget();\n    } else if (dist < this.slowDownDistance) {\n      desired.setLength((this.maxSpeed * dist) / this.slowDownDistance);\n    } else {\n      desired.setLength(this.maxSpeed);\n    }\n\n    desired.sub(particle.getVelocity());\n    limit(desired, this.maxForce);\n\n    return desired;\n  }\n\n  setRandomTarget() {\n    this.target = new Vector3(\n      Math2.randFloat(this.min.x, this.max.x),\n      Math2.randFloat(this.min.y, this.max.y),\n      Math2.randFloat(this.min.z, this.max.z)\n    );\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\nconst delta = new Vector3();\n\n/**\n * Local Particle Behavior: compares the passed in Particle to its own list of neighbors\n * </p> addBehavior to the VParticle.behaviors;\n * </p> seperation algorythm based on: Craig Reynold's Boids program to simulate the flocking behavior of birds. Here just the rule of seperation. </p> Java\n * implementation Daniel Shiffman (www.shiffman.net); Jose Sanchez (www.plethora-project.com)\n */\n\nexport default class Separate {\n  constructor({ distance = 25.0, maxSpeed = 3.0, maxForce = 0.05 } = {}) {\n    this.distance = distance;\n    this.maxSpeed = maxSpeed;\n    this.maxForce = maxForce;\n    this.enabled = true;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.seperate(particle);\n      particle.addForce(f);\n    }\n  }\n\n  seperate(particle) {\n    const sep = new Vector3();\n\n    let count = 0;\n    const distanceSquared = this.distance * this.distance;\n\n    particle.neighbors.forEach((neighbor) => {\n      if (neighbor !== particle) {\n        const d = particle.distanceToSquared(neighbor);\n\n        // SEPARATION:\n        if (d < distanceSquared && d > 0.0) {\n          delta.copy(particle);\n          delta.sub(neighbor);\n          delta.setLength(1.0 / d);\n          sep.add(delta);\n          count++;\n        }\n        // SEPARATION:\n        if (count > 0) {\n          sep.multiplyScalar(1.0 / count);\n        }\n        if (sep.lengthSq() > 0) {\n          // Implement Reynolds: Steering = Desired - Velocity\n          sep.setLength(this.maxSpeed);\n          sep.sub(particle.getVelocity());\n          limit(sep, this.maxForce);\n        }\n      }\n    });\n\n    return sep;\n  }\n}\n", "import Vector3 from '../math/Vector3.js';\nimport { limit } from '../math/VecUtils.js';\n\n// basic wander-algorythm\n\nexport default class Wander {\n  constructor({ speed = 1.0, maxChange = 1.0, maxForce = 1.0 } = {}) {\n    this.speed = speed;\n    this.maxChange = maxChange;\n    this.maxForce = maxForce;\n\n    this.wanderVelocity = new Vector3();\n    this.wanderDirection = new Vector3();\n    this.enabled = true;\n  }\n\n  apply(particle) {\n    if (this.enabled) {\n      const f = this.wander();\n      particle.addForce(f);\n    }\n  }\n\n  wander() {\n    this.wanderDirection.normalize();\n    // wanderDirection.cross(upVector, wanderDirection);\n\n    this.wanderDirection.x += (Math.random() - 0.5) * this.maxChange;\n    this.wanderDirection.y += (Math.random() - 0.5) * this.maxChange;\n    this.wanderDirection.z += (Math.random() - 0.5) * this.maxChange;\n\n    this.wanderVelocity.set(0, 0, 0);\n    this.wanderVelocity.add(this.wanderDirection);\n\n    this.wanderVelocity.multiplyScalar(this.speed);\n\n    limit(this.wanderVelocity, this.maxForce);\n\n    return this.wanderVelocity;\n  }\n}\n", "/**\n * used for internal speed optimization\n */\n\nexport default class HashGrid {\n  constructor({ neighborRange = 100 } = {}) {\n    this.neighborRange = neighborRange;\n    this.H = new Map();\n    this.particles = new Set();\n  }\n\n  getXr(pos) {\n    return Math.floor(pos.x / this.neighborRange);\n  }\n\n  getYr(pos) {\n    return Math.floor(pos.y / this.neighborRange);\n  }\n\n  getKey(pos) {\n    return this.getXr(pos) + '_' + this.getYr(pos);\n  }\n\n  add(particle) {\n    this.particles.add(particle);\n    this.insert(particle);\n  }\n\n  clear() {\n    this.H.clear();\n    this.particles.clear();\n  }\n\n  insert(particle) {\n    // using array (faster):\n    const hashKey = this.getKey(particle);\n    if (this.H.get(hashKey) === undefined) {\n      this.H.set(hashKey, [particle]);\n    } else {\n      let s = this.H.get(hashKey);\n      s.push(particle);\n      this.H.set(hashKey, s);\n    }\n  }\n\n  updateAll() {\n    this.H.clear();\n    this.particles.forEach((particle) => {\n      this.insert(particle);\n    });\n\n    // console.log(this.particles.size);\n    // console.log(this.H.toJS());\n  }\n\n  check(pos) {\n    const Xr = this.getXr(pos);\n    const Yr = this.getYr(pos);\n    const keys = [];\n    let i = 0;\n    for (let xr = Xr - 1; xr <= Xr + 1; xr++) {\n      for (let yr = Yr - 1; yr <= Yr + 1; yr++) {\n        keys[i++] = xr + '_' + yr;\n      }\n    }\n\n    // using new Set:\n    // let checked = new Set();\n    // for(i = 0; i < keys.length; i++) {\n    //   if(this.H.get(keys[i]) !== undefined) {\n    //     checked = checked.merge(this.H.get(keys[i]));\n    //   }\n    // }\n    // return checked;\n\n    // using array (faster):\n    let checked = [];\n    for (i = 0; i < keys.length; i++) {\n      if (this.H.get(keys[i]) !== undefined) {\n        checked = checked.concat(this.H.get(keys[i]));\n      }\n    }\n\n    return new Set(checked);\n  }\n\n  delete(p) {\n    const hashKey = this.getKey(p);\n    this.H.delete(hashKey);\n    this.particles.delete(p);\n  }\n\n  size() {\n    return this.H.size;\n  }\n}\n", "// ported by markuslerner.com from punktiert Processing library:\n// https://github.com/djrkohler/punktiert/tree/master/src/punktiert/physics\n\nimport { Vector3 } from './index.js';\nimport { constrainX, constrainY, constrainZ } from './math/VecUtils.js';\n\n/**\n * An individual 3D particle for use by the VPhysics and VSpring classes. the functionality can be extended by applying different behaviors </p> this class is\n * more or less an modification/ extension of Karsten Schmidt's toxi.physics.VerletPartcle class\n */\n\nexport default class Particle extends Vector3 {\n  constructor(x = 0.0, y = 0.0, z = 0.0, w = 1.0, r = 1.0) {\n    super(x, y, z);\n\n    this.prev = new Vector3(x, y, z);\n    this.temp = new Vector3();\n    this.locked = false;\n\n    this.behaviors = null;\n    this.neighbors = null;\n\n    this.weight = w;\n    this.radius = r;\n    this.friction = 0;\n\n    this.force = new Vector3();\n\n    this.followers = new Set();\n  }\n\n  /**\n   * Adds the given behavior to the list of behaviors applied to this particle at each step.\n   */\n  addBehavior(behavior, addEvenIfExists = false) {\n    if (this.behaviors === null) {\n      this.behaviors = new Set();\n    }\n    if (!this.behaviors.has(behavior) || addEvenIfExists) {\n      this.behaviors.add(behavior);\n    }\n    return this;\n  }\n\n  /**\n   * Adds the given constraint to the list of constraints applied to this particle at each step.\n   * A constraint is applied always wether the particle is locked or not\n   */\n  addConstraint(constraint) {\n    if (this.behaviors === null) {\n      this.behaviors = new Set();\n    }\n    this.behaviors.add(constraint);\n    return this;\n  }\n\n  addFollower(vector) {\n    this.followers.add(vector);\n  }\n\n  addForce(force) {\n    this.force.add(force);\n    return this;\n  }\n\n  addVelocity(v) {\n    this.prev.sub(v);\n    return this;\n  }\n\n  applyBehaviors() {\n    if (this.behaviors != null) {\n      this.behaviors.forEach((behavior) => {\n        behavior.apply(this);\n      });\n    }\n  }\n\n  applyForce(deltaTime) {\n    this.temp.copy(this);\n\n    var delta = new Vector3().copy(this);\n    delta\n      .sub(this.prev)\n      .add(this.force.multiplyScalar(this.weight * Math.min(deltaTime, 1)));\n    this.add(delta);\n\n    this.prev.copy(this.temp);\n\n    this.force.set(0, 0, 0);\n  }\n\n  clearForce() {\n    this.force.set(0, 0, 0);\n    return this;\n  }\n\n  clearVelocity() {\n    this.prev.copy(this);\n    return this;\n  }\n\n  getVelocity() {\n    return new Vector3().copy(this).sub(this.prev);\n  }\n\n  removeBehavior(behavior) {\n    if (this.behaviors !== null) {\n      const found = this.behaviors.has(behavior);\n      this.behaviors.delete(behavior);\n      return found;\n    } else {\n      return false;\n    }\n  }\n\n  removeFollower(vector) {\n    if (this.followers !== null) {\n      const found = this.followers.has(vector);\n      this.followers.delete(vector);\n      return found;\n    } else {\n      return false;\n    }\n  }\n\n  scaleVelocity(scale) {\n    if (scale > 0) {\n      this.prev.lerp(this, 0 + scale);\n    }\n    return this;\n  }\n\n  setVelocity(vel) {\n    this.prev.copy(this).sub(vel);\n  }\n\n  unlock() {\n    this.clearVelocity();\n    this.locked = false;\n    return this;\n  }\n\n  /**\n   * applies Behaviors and Force on the particles position. called automatically inherently from the Physics class\n   */\n  update(deltaTime) {\n    if (!this.locked) {\n      this.applyBehaviors();\n      this.applyForce(deltaTime);\n    }\n    this.scaleVelocity(this.friction);\n\n    this.followers.forEach((follower) => {\n      follower.copy(this);\n    });\n  }\n\n  equalsWithTolerance(v, tolerance) {\n    let diff = this.x - v.x;\n    if (isNaN(diff)) {\n      return false;\n    }\n    if ((diff < 0 ? -diff : diff) > tolerance) {\n      return false;\n    }\n    diff = this.y - v.y;\n    if (isNaN(diff)) {\n      return false;\n    }\n    if ((diff < 0 ? -diff : diff) > tolerance) {\n      return false;\n    }\n    diff = this.z - v.z;\n    if (isNaN(diff)) {\n      return false;\n    }\n    if ((diff < 0 ? -diff : diff) > tolerance) {\n      return false;\n    }\n    return true;\n  }\n\n  constrainX(min, max) {\n    constrainX(this, min, max);\n  }\n\n  constrainY(min, max) {\n    constrainY(this, min, max);\n  }\n\n  constrainZ(min, max) {\n    constrainZ(this, min, max);\n  }\n}\n", "/**\n * particle physics engine using Verlet integration </p> based on:\n * http://en.wikipedia.org/wiki/Verlet_integration\n * http://www.teknikus.dk/tj/gdc2001.htm </p> this class is more or less an\n * modification/ extension of Karsten Schmidt's toxi.physics.VerletPhysics\n * class, http://toxiclibs.org ; </p> for convenience combined physics for 2D /\n * 3D; some addons for speed; and extended behaviors </p> Written by Daniel\n * Koehler - 2012 www.lab-eds.org for feedback please contact me at:\n * daniel@lab-eds.org\n * Default iterations for verlet solver: 50\n */\nexport default class SimplePhysics {\n  constructor({ friction = 0.95, springIterationsCount = 50 } = {}) {\n    this.behaviors = new Set();\n    this.constraints = new Set();\n    this.groups = new Set();\n    this.particles = new Set();\n    this.springs = new Set();\n\n    this.friction = friction;\n    this.springIterationsCount = springIterationsCount;\n  }\n\n  /**\n   * Adds a behavior to the list\n   *\n   * @param behavior\n   */\n  addBehavior(behavior) {\n    this.behaviors.add(behavior);\n  }\n\n  /**\n   * Adds a particle to the list\n   *\n   * @param p\n   * @return itself\n   */\n  addParticle(particle) {\n    return this.returnIfConstrained(particle);\n  }\n\n  /**\n   * Adds a spring to the list\n   *\n   * @param s\n   * @return itself\n   */\n  addSpring(s) {\n    if (this.getSpring(s.a, s.b) === null) {\n      this.springs.add(s);\n    }\n    return this;\n  }\n\n  addConstraint(constraint) {\n    this.constraints.add(constraint);\n    return constraint;\n  }\n\n  /**\n   * Adds a group (or String) to the List without affecting the global\n   * particle calculation\n   *\n   * @param g\n   *            VParticleGroup\n   */\n  addGroup(g) {\n    return this.groups.add(g);\n  }\n\n  clear() {\n    this.particles.clear();\n    this.springs.clear();\n    return this;\n  }\n\n  getParticle(particle) {\n    return this.returnIfConstrained(particle);\n  }\n\n  /**\n   * Attempts to find the spring element between the 2 particles supplied\n   *\n   * @param a\n   *            particle 1\n   * @param b\n   *            particle 2\n   * @return spring instance, or null if not found\n   */\n  getSpring(a, b) {\n    this.springs.forEach((s) => {\n      if ((s.a === a && s.b === b) || (s.a === b && s.b === a)) {\n        return s;\n      }\n    });\n    return null;\n  }\n\n  /**\n   * get the count of how many springs are connected to A\n   *\n   * @param spring\n   *            particle 1\n   */\n  getnumConnected(spring) {\n    let count = 0;\n    if (this.springs != null) {\n      this.springs.forEach((s) => {\n        if (s.a === spring || s.b === spring) {\n          count++;\n        }\n      });\n    }\n    return count;\n  }\n\n  hasBehavior(behavior) {\n    return this.behaviors.has(behavior);\n  }\n\n  hasConstraint(constraint) {\n    return this.constraints.has(constraint);\n  }\n\n  hasGroup(group) {\n    return this.groups.has(group);\n  }\n\n  hasParticle(particle) {\n    return this.particles.has(particle);\n  }\n\n  hasSpring(spring) {\n    return this.springs.has(spring);\n  }\n\n  /**\n   * Removes a behavior from the simulation.\n   *\n   * @param behavior\n   *            behavior to remove\n   * @return true, if removed successfully\n   */\n  removeBehavior(behavior) {\n    return this.behaviors.delete(behavior);\n  }\n\n  /**\n   * Removes a constraint from the simulation.\n   */\n  removeConstraint(constraint) {\n    return this.constraints.delete(constraint);\n  }\n\n  /**\n   * Removes a particle from the simulation.\n   *\n   * @param particle\n   *            particle to remove\n   * @return true, if removed successfully\n   */\n  removeParticle(particle) {\n    return this.particles.delete(particle);\n  }\n\n  /**\n   * Removes a spring connector from the simulation instance.\n   *\n   * @param spring\n   *            spring to remove\n   * @return true, if the spring has been removed\n   */\n  removeSpring(spring) {\n    return this.springs.delete(spring);\n  }\n\n  /**\n   * Removes a spring connector and its both end point particles from the\n   * simulation\n   *\n   * @param spring\n   *            spring to remove\n   * @return true, only if spring AND particles have been removed successfully\n   */\n  removeSpringElements(spring) {\n    if (this.removeSpring(spring)) {\n      return this.removeParticle(spring.a) && this.removeParticle(spring.b);\n    }\n    return false;\n  }\n\n  /**\n   * Removes a particle group from the simulation instance.\n   *\n   * @param group\n   *            to remove\n   * @return true, if the spring has been removed\n   */\n  removeGroup(group) {\n    return this.groups.delete(group);\n  }\n\n  /**\n   * Updates all particle positions\n   */\n  updateParticles(deltaTime) {\n    // console.log('updateParticles()');\n\n    this.particles.forEach((particle) => {\n      if (particle.neighbors === null) {\n        particle.neighbors = this.particles;\n      }\n\n      this.behaviors.forEach((behavior) => {\n        behavior.apply(particle);\n      });\n\n      particle.scaleVelocity(this.friction);\n      particle.update(deltaTime);\n    });\n  }\n\n  updateSprings(deltaTime) {\n    if (this.springs !== null) {\n      for (let i = this.springIterationsCount; i > 0; i--) {\n        this.springs.forEach((spring) => {\n          spring.update(deltaTime);\n        });\n      }\n    }\n  }\n\n  /**\n   * Progresses the physics simulation by 1 time step and updates all forces\n   * and particle positions accordingly\n   */\n  update(deltaTime = 1) {\n    this.updateParticles(deltaTime);\n    this.updateSprings(deltaTime);\n\n    if (this.groups !== null) {\n      this.groups.forEach((group) => {\n        this.group.update(deltaTime);\n      });\n    }\n  }\n\n  returnIfConstrained(particle) {\n    this.constraints.forEach((constraint) => {\n      if (particle.equalsWithTolerance(constraint, 0.1)) {\n        return constraint;\n      }\n    });\n\n    return this.returnIfDuplicate(particle);\n  }\n\n  returnIfDuplicate(particle) {\n    this.particles.forEach((particle2) => {\n      if (particle === particle2) {\n        return particle2;\n      }\n    });\n    this.particles.add(particle);\n    return particle;\n  }\n}\n", "// ported by markuslerner.com from punktiert Processing library:\n// https://github.com/djrkohler/punktiert/tree/master/src/punktiert/physics\n\nimport SimplePhysics from './SimplePhysics.js';\nimport HashGrid from '../math/HashGrid.js';\n\n/**\n * A particle physics engine using Verlet integration </p> based on:\n * http://en.wikipedia.org/wiki/Verlet_integration\n * http://www.teknikus.dk/tj/gdc2001.htm </p> this class is more or less an\n * modification/ extension of Karsten Schmidt's toxi.physics.VerletPhysics\n * class, http://toxiclibs.org ; </p> for convenience combined physics for 2D /\n * 3D; some addons for speed; and extended behaviors </p> </p> Written by Daniel\n * Koehler - 2012 www.lab-eds.org for feedback please contact me at:\n * daniel@lab-eds.org\n */\nexport default class GridPhysics extends SimplePhysics {\n  constructor(props) {\n    const {\n      min = null,\n      max = null,\n      bounce = false,\n      neighborRange = 80, // max distance for picking neighbors\n      friction = 0.95,\n      springIterationsCount = 50,\n    } = props;\n    super(props);\n\n    this.hashgrid = new HashGrid({ neighborRange });\n    this.box = null; // Bounding Box\n    this.neighborsCountAverage = 0;\n\n    this.batchSize = 100;\n    this.start = 0;\n\n    if (min !== null && max !== null) {\n      // this.box = new WorldBox(min, max);\n      this.box.setBounceSpace(bounce);\n      this.box.setWrapSpace(!bounce);\n      this.addBehavior(this.box);\n    }\n  }\n\n  /**\n   * Adds a particle to the list\n   *\n   * @param p\n   * @return itself\n   */\n  addParticle(particle) {\n    const p = super.addParticle(particle);\n    this.hashgrid.add(p);\n    return p;\n  }\n\n  setBox(min, max) {\n    if (this.box === null) {\n      this.box = new WorldBox(min, max);\n    } else {\n      this.box.setMin(min);\n      this.box.setMax(max);\n    }\n  }\n\n  setBounceSpace(bounce) {\n    if (this.box !== null) {\n      this.box.setBounceSpace(bounce);\n    }\n  }\n\n  setWrappedSpace(wrap) {\n    if (this.box !== null) {\n      this.box.setWrapSpace(wrap);\n    }\n  }\n\n  clear() {\n    super.clear();\n    this.hashgrid.clear();\n    return this;\n  }\n\n  /**\n   * Removes a particle from the simulation.\n   *\n   * @param p\n   *            particle to remove\n   * @return true, if removed successfully\n   */\n  removeParticle(particle) {\n    this.hashgrid.delete(particle);\n    return super.removeParticle(particle);\n  }\n\n  update(deltaTime = 1) {\n    this.hashgrid.updateAll();\n\n    this.neighborsCountAverage = 0;\n\n    this.particles.forEach((particle) => {\n      particle.neighbors = this.hashgrid.check(particle);\n\n      this.neighborsCountAverage += particle.neighbors.size;\n    });\n\n    this.neighborsCountAverage /= this.particles.size;\n    this.neighborsCountAverage = Math.round(this.neighborsCountAverage);\n\n    super.update(deltaTime);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
